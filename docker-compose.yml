version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - app-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - PORT=8000
      - MONGODB_URI=mongodb://mongodb:27017/agentic-workflow-builder
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - app-network

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/init-db.js:/docker-entrypoint-initdb.d/init-db.js:ro
    environment:
      - MONGO_INITDB_DATABASE=agentic-workflow-builder
    networks:
      - app-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  # Workflow Engine Service
  workflow-engine:
    build:
      context: ./workflow-engine
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - PORT=8001
      - MONGODB_URI=mongodb://mongodb:27017/agentic-workflow-builder
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./workflow-engine:/app
      - /app/node_modules
    networks:
      - app-network

  # Integration Service
  integration-service:
    build:
      context: ./integration-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - PORT=8002
      - MONGODB_URI=mongodb://mongodb:27017/agentic-workflow-builder
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./integration-service:/app
      - /app/node_modules
    networks:
      - app-network

  # MCP Container Management Service
  mcp-service:
    build:
      context: ./mcp-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - PORT=8003
      - MONGODB_URI=mongodb://mongodb:27017/agentic-workflow-builder
      - REDIS_URL=redis://redis:6379
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./mcp-service:/app
      - /app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network

  # AI Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - PORT=8004
      - MONGODB_URI=mongodb://mongodb:27017/agentic-workflow-builder
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./ai-service:/app
      - /app/node_modules
    networks:
      - app-network

  # Serena MCP Server (Web Automation)
  serena-mcp:
    build:
      context: ./mcp-service/serena-mcp
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=development
      - PORT=8005
      - MONGODB_URI=mongodb://mongodb:27017/agentic-workflow-builder
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./mcp-service/serena-mcp:/app
      - /app/node_modules
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  mongodb_data:
  redis_data:

networks:
  app-network:
    driver: bridge
